diff --git a/lab_3/source/main.c b/lab_3/source/main.c
index 478dd35..dc3459a 100755
--- a/lab_3/source/main.c
+++ b/lab_3/source/main.c
@@ -4,9 +4,15 @@
 
 void blink_once()
 {
-    // Turn on LED
+    gpio[GPSET0] |= 1 << 23;
 
-    // Turn off LED
+	timer_delay_ms(500);
+
+	gpio[GPCLR0] |= 1 << 23;
+
+	timer_delay_ms(500);
+
+	put_string("Blink\n\0");
 
 }
 
@@ -15,32 +21,42 @@ void blink_code(uint32_t err)
     for(int i = 0; i < err; ++i)
     {
         // Blink the LED
+		blink_once();
 
     }
 
     // Delay for desired time
+	timer_delay_sec(5);
     
 }
 
 int main()
 {
     // Init GPIO select for external LED
+	gpio[GPFSEL2] = 0x1000;
 
     // Init uart for debugging purposes
+	init_uart();
 
     // Provide a buffer size for debug prints
 
     // You might need a count for something
-    uint32_t count = 1;
+    uint32_t blink_count = 1;
+
+	put_string("Running\n\0");
 
     // Mainline loop
     while (1)
     {
+		put_string("Blink sequence\n\0");
         // implement error code described in lab
-
-        // call blink_code at some point
-        blink_code(     );
-
+		if(blink_count <= 10){
+			blink_code(blink_count);
+			blink_count++;
+		}
+		else{
+			blink_count = 1;
+		}
     }
     
     return 0;
diff --git a/lab_3/source/system_timer.c b/lab_3/source/system_timer.c
index c2a3a8b..e98f148 100755
--- a/lab_3/source/system_timer.c
+++ b/lab_3/source/system_timer.c
@@ -4,28 +4,37 @@ void timer_delay_us(uint32_t delayUs)
 {
     // First, get the current count of the timer.
     
+	uint32_t timer = sys_timer[SYS_TIMER_CLO];
 
     // Next, add the delay to the current count.
     // and, put that into the C0 timer register.
     
+	timer += delayUs;
+	sys_timer[SYS_TIMER_C0] = timer;
 
     // Clear the M0 timer register.
     
+	sys_timer[SYS_TIMER_CS] |= 1;
 
     // Now we spin until the CS register
     // has a 1 in the 0 position, then we know
     // our timer has expired.
+
+	while((sys_timer[SYS_TIMER_CS] & 1) != 1){
+
+	}
     
 }
 
 void timer_delay_ms(uint32_t delayMs)
 {
     // scale the microsecond delay appropriately
+	timer_delay_us(delayMs * 1000);
     
 }
 
 void timer_delay_sec(uint32_t delaySec)
 {
     // scale the microsecond delay appropriately
-    
+    timer_delay_ms(delaySec * 1000);
 }
